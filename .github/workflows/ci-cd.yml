name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        pip install black
        black --check --diff .

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy app --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t n8n-tools-api:test .

    - name: Run Docker container tests
      run: |
        # Start container in background
        docker run -d -p 8000:8000 --name test-container n8n-tools-api:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API functionality
        echo "Testing API endpoints..."
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/docs || exit 1
        curl -f http://localhost:8000/openapi.json || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

    - name: Test Docker Compose
      run: |
        if [ -f docker-compose.yml ]; then
          docker-compose up -d
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker-compose down
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Build and start application
      run: |
        docker build -t n8n-tools-api:perf .
        docker run -d -p 8000:8000 --name perf-container n8n-tools-api:perf
        sleep 10

    - name: Run performance tests
      run: |
        # Create a simple locustfile for API testing
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import io

        class APIUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def test_health(self):
                self.client.get("/health")
            
            @task(2)
            def test_root(self):
                self.client.get("/")
            
            @task(1)
            def test_pdf_status(self):
                self.client.get("/api/v1/pdf/")
        EOF
        
        # Run load test
        locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:8000

    - name: Cleanup
      run: |
        docker stop perf-container
        docker rm perf-container

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: your-dockerhub-username/n8n-tools-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # For example: kubectl, docker-compose, or API calls to your hosting provider

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # For example: kubectl, docker-compose, or API calls to your hosting provider

  notification:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.docker-test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.docker-test.result == 'failure' }}
      run: |
        echo "❌ Tests failed!"
        # Add failure notification logic here